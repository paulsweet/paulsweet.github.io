<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://paulsweet.github.io/</id>
    <title>Wasteland? Open up!</title>
    <updated>2021-06-29T05:45:59.724Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://paulsweet.github.io/"/>
    <link rel="self" href="https://paulsweet.github.io/atom.xml"/>
    <subtitle>How you live your life is your business.</subtitle>
    <logo>https://paulsweet.github.io/images/avatar.png</logo>
    <icon>https://paulsweet.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Wasteland? Open up!</rights>
    <entry>
        <title type="html"><![CDATA[JAVA 包和类]]></title>
        <id>https://paulsweet.github.io/post/java-bao-he-lei/</id>
        <link href="https://paulsweet.github.io/post/java-bao-he-lei/">
        </link>
        <updated>2021-06-29T03:36:07.000Z</updated>
        <summary type="html"><![CDATA[<p>提炼：</p>
<ul>
<li>
<p>就像文件与文件夹的区别一样。一个包中可以有多个不同的类。而同一个类在一个包中只能存在一个。Java中的一个包就是一个类库单元，包内包含有一组类，它们在单一的名称空间之下被组织在了一起。</p>
</li>
<li>
<p>导入包名，就是要提供一个管理名称空间的机制。在Java中对名称空间进行完全控制并为每个类创建唯一的标识符组合就成为了非常重要的事情。</p>
</li>
<li>
<p>当编写一个Java源代码文件时，此文件通常被称为<strong>编译单元</strong>。每个编译单元都必须有一个后缀名.java，而在编译单元内有且仅有一个public类，否则编译器就不会接受。该public类的名称必须与文件的名称相同（包括大小写，但不包括后缀名.java）。如果在该编译单元之中还有额外的类的话，那么在包之外的世界是无法看见这些类的，因为它们不是public类，而且它们主要用来为主public类提供支持。</p>
</li>
<li>
<p>如果使用package语句，它必须是.java文件中除注释以外的第一句程序代码。如果在文件的起始处写：</p>
</li>
<li>
<p>package fruit;<br>
就表示你在声明该编译单元是名为fruit的类库的一部分，或者换句话说，你正在声明该编译单元中的public类名称是位于fruit名称的保护伞下，由fruit名称罩着。</p>
</li>
<li>
<p>我们应该牢记：package和import关键字允许做的是将单一的全局名称空间分割成各自独立封闭的名称空间，使得无论多少人使用Internet以及Java开始编写类，都不会出现与我们的类名称相冲突的问题，因为我们的类是被封闭在我们自己定义的独立的名称空间里面的，而非在公共的全局名称空间里面。</p>
</li>
<li>
<p>程序在运行的时候具体是如何确定.class文件位置的呢？</p>
<hr>
</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<p>提炼：</p>
<ul>
<li>
<p>就像文件与文件夹的区别一样。一个包中可以有多个不同的类。而同一个类在一个包中只能存在一个。Java中的一个包就是一个类库单元，包内包含有一组类，它们在单一的名称空间之下被组织在了一起。</p>
</li>
<li>
<p>导入包名，就是要提供一个管理名称空间的机制。在Java中对名称空间进行完全控制并为每个类创建唯一的标识符组合就成为了非常重要的事情。</p>
</li>
<li>
<p>当编写一个Java源代码文件时，此文件通常被称为<strong>编译单元</strong>。每个编译单元都必须有一个后缀名.java，而在编译单元内有且仅有一个public类，否则编译器就不会接受。该public类的名称必须与文件的名称相同（包括大小写，但不包括后缀名.java）。如果在该编译单元之中还有额外的类的话，那么在包之外的世界是无法看见这些类的，因为它们不是public类，而且它们主要用来为主public类提供支持。</p>
</li>
<li>
<p>如果使用package语句，它必须是.java文件中除注释以外的第一句程序代码。如果在文件的起始处写：</p>
</li>
<li>
<p>package fruit;<br>
就表示你在声明该编译单元是名为fruit的类库的一部分，或者换句话说，你正在声明该编译单元中的public类名称是位于fruit名称的保护伞下，由fruit名称罩着。</p>
</li>
<li>
<p>我们应该牢记：package和import关键字允许做的是将单一的全局名称空间分割成各自独立封闭的名称空间，使得无论多少人使用Internet以及Java开始编写类，都不会出现与我们的类名称相冲突的问题，因为我们的类是被封闭在我们自己定义的独立的名称空间里面的，而非在公共的全局名称空间里面。</p>
</li>
<li>
<p>程序在运行的时候具体是如何确定.class文件位置的呢？</p>
<hr>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python多进程]]></title>
        <id>https://paulsweet.github.io/post/python-duo-jin-cheng/</id>
        <link href="https://paulsweet.github.io/post/python-duo-jin-cheng/">
        </link>
        <updated>2021-06-28T15:46:48.000Z</updated>
    </entry>
</feed>